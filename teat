-- 3-Tool-Spam: SMART SYSTEM (Keybind F) - MIT AUTO RE-EQUIP
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game:GetService("Players").LocalPlayer

local isActive = false
local lastUsed = {
    BeeHive = 0,
    Sentry = 0,
    Mine = 0
}

local ENV = getgenv() or _G
ENV.__TOOL_SPAM_ACTIVE = false

local function getClickerCtrl()
    return (getgenv() or _G).__CLICKER_CTRL
end

-- Speichert aktuell equipped Tool
local function getCurrentTool()
    if LocalPlayer.Character then
        return LocalPlayer.Character:FindFirstChildOfClass("Tool")
    end
    return nil
end

-- Equippt ein bestimmtes Tool wieder
local function reequipTool(toolName)
    if not toolName then return end
    
    local tool = LocalPlayer.Backpack:FindFirstChild(toolName)
    if not tool then return end
    
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:EquipTool(tool)
        print("🔄 Re-equipped:", toolName)
    end
end

local function getToolCooldown(toolName)
    local tool = LocalPlayer.Backpack:FindFirstChild(toolName)
    if not tool then return 999 end
    
    local cooldownValue = tool:FindFirstChild("Cooldown") or tool:FindFirstChild("NextUse") or tool:FindFirstChild("Ready")
    
    if cooldownValue and cooldownValue:IsA("NumberValue") then
        return cooldownValue.Value
    end
    
    if tool.Enabled == false then
        return 10
    end
    
    return 0
end

local function activateTool(toolName)
    local tool = LocalPlayer.Backpack:FindFirstChild(toolName)
    if not tool then return false end
    
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return false end
    
    humanoid:EquipTool(tool)
    task.wait(0.2)
    tool:Activate()
    task.wait(0.15)
    humanoid:UnequipTools()
    
    lastUsed[toolName:gsub(" ", "")] = tick()
    print("✅", toolName, "aktiviert!")
    return true
end

local function sentryExists()
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("Sentry") then
            return true
        end
    end
    return false
end

local function startMonitoring(previousToolName)
    isActive = true
    ENV.__TOOL_SPAM_ACTIVE = true
    
    local ctrl = getClickerCtrl()
    if ctrl then ctrl:Pause() end
    
    print("🧠 SMART MONITORING GESTARTET")
    
    task.spawn(function()
        while isActive do
            
            local beeCooldown = getToolCooldown("BeeHive")
            if beeCooldown == 0 and (tick() - lastUsed.BeeHive) > 5 then
                print("🐝 BeeHive ist READY!")
                
                -- Merke vorheriges Tool
                local currentTool = getCurrentTool()
                local currentToolName = currentTool and currentTool.Name or nil
                
                activateTool("BeeHive")
                
                -- Re-equip
                if currentToolName and currentToolName ~= "BeeHive" then
                    task.wait(0.2)
                    reequipTool(currentToolName)
                end
            end
            
            task.wait(10)
            
            local mineCooldown = getToolCooldown("Subspace Mine")
            if mineCooldown == 0 and (tick() - lastUsed.Mine) > 3 then
                print("💣 Mine ist READY!")
                
                local currentTool = getCurrentTool()
                local currentToolName = currentTool and currentTool.Name or nil
                
                activateTool("Subspace Mine")
                
                if currentToolName and currentToolName ~= "Subspace Mine" then
                    task.wait(0.2)
                    reequipTool(currentToolName)
                end
            end
            
            task.wait(5)
            
            if not sentryExists() and (tick() - lastUsed.Sentry) > 2 then
                print("👁️ Sentry FEHLT - platziere!")
                
                local currentTool = getCurrentTool()
                local currentToolName = currentTool and currentTool.Name or nil
                
                activateTool("All Seeing Sentry")
                
                if currentToolName and currentToolName ~= "All Seeing Sentry" then
                    task.wait(0.2)
                    reequipTool(currentToolName)
                end
            end
            
            task.wait(5)
        end
        
        ENV.__TOOL_SPAM_ACTIVE = false
        if ctrl then ctrl:Resume() end
    end)
end

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    
    if input.KeyCode == Enum.KeyCode.F then
        print("🔥 F GEDRÜCKT")
        
        -- Speichere aktuell equipped Tool
        local previousTool = getCurrentTool()
        local previousToolName = previousTool and previousTool.Name or nil
        
        print("💾 Gespeichertes Tool:", previousToolName or "Nichts")
        
        -- Erste Aktivierung
        activateTool("BeeHive")
        task.wait(0.4)
        activateTool("All Seeing Sentry")
        task.wait(0.4)
        activateTool("Subspace Mine")
        task.wait(0.3)
        
        -- Re-equip vorheriges Tool
        if previousToolName then
            reequipTool(previousToolName)
        end
        
        print("✅ Initiale Aktivierung fertig")
        print("🧠 Starte Smart Monitoring...")
        
        task.wait(1)
        startMonitoring(previousToolName)
    end
end)

print("══════════════════════════════")
print("✅ SMART 3-Tool-Spam geladen")
print("🔄 Re-equippt automatisch vorheriges Tool!")
print("══════════════════════════════")
