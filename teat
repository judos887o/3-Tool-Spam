-- 3-Tool-Spam: SMART - Aktiviert NUR wenn Tool WIRKLICH ready ist
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game:GetService("Players").LocalPlayer

local isActive = false
local lastUsed = {
    BeeHive = 0,
    Sentry = 0,
    Mine = 0
}

local ENV = getgenv() or _G
ENV.__TOOL_SPAM_ACTIVE = false

local function getClickerCtrl()
    return (getgenv() or _G).__CLICKER_CTRL
end

-- Checkt ob Tool bereit ist (via Cooldown-Property vom Tool)
local function getToolCooldown(toolName)
    local tool = LocalPlayer.Backpack:FindFirstChild(toolName)
    if not tool then return 999 end
    
    -- Suche nach Cooldown-Value im Tool
    local cooldownValue = tool:FindFirstChild("Cooldown") or tool:FindFirstChild("NextUse") or tool:FindFirstChild("Ready")
    
    if cooldownValue and cooldownValue:IsA("NumberValue") then
        return cooldownValue.Value
    end
    
    -- Fallback: Check Enabled
    if tool.Enabled == false then
        return 10 -- Geschätzt
    end
    
    return 0 -- Ready
end

-- Aktiviere Tool EINMAL
local function activateTool(toolName)
    local tool = LocalPlayer.Backpack:FindFirstChild(toolName)
    if not tool then return false end
    
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return false end
    
    humanoid:EquipTool(tool)
    task.wait(0.2)
    tool:Activate()
    task.wait(0.15)
    humanoid:UnequipTools()
    
    lastUsed[toolName:gsub(" ", "")] = tick()
    print("✅", toolName, "aktiviert! Wartet jetzt auf Cooldown...")
    return true
end

-- Checkt ob Sentry existiert
local function sentryExists()
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("Sentry") then
            return true
        end
    end
    return false
end

-- SMART Monitor System
local function startMonitoring()
    isActive = true
    ENV.__TOOL_SPAM_ACTIVE = true
    
    local ctrl = getClickerCtrl()
    if ctrl then ctrl:Pause() end
    
    print("🧠 SMART MONITORING GESTARTET")
    print("Checkt Tools und aktiviert NUR wenn bereit!")
    
    task.spawn(function()
        while isActive do
            
            -- BeeHive Check
            local beeCooldown = getToolCooldown("BeeHive")
            if beeCooldown == 0 and (tick() - lastUsed.BeeHive) > 5 then
                print("🐝 BeeHive ist READY!")
                activateTool("BeeHive")
            end
            
            task.wait(10) -- Warte 10 Sekunden zwischen BeeHive checks
            
            -- Mine Check
            local mineCooldown = getToolCooldown("Subspace Mine")
            if mineCooldown == 0 and (tick() - lastUsed.Mine) > 3 then
                print("💣 Mine ist READY!")
                activateTool("Subspace Mine")
            end
            
            task.wait(5)
            
            -- Sentry Check (nur wenn fehlt)
            if not sentryExists() and (tick() - lastUsed.Sentry) > 2 then
                print("👁️ Sentry FEHLT - platziere!")
                activateTool("All Seeing Sentry")
            end
            
            task.wait(5)
        end
        
        ENV.__TOOL_SPAM_ACTIVE = false
        if ctrl then ctrl:Resume() end
    end)
end

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    
    if input.KeyCode == Enum.KeyCode.F then
        print("🔥 F GEDRÜCKT")
        
        -- Erste Aktivierung
        activateTool("BeeHive")
        task.wait(0.4)
        activateTool("All Seeing Sentry")
        task.wait(0.4)
        activateTool("Subspace Mine")
        
        print("✅ Initiale Aktivierung fertig")
        print("🧠 Starte Smart Monitoring...")
        
        task.wait(1)
        startMonitoring()
    end
end)

print("✅ SMART 3-Tool-Spam geladen")
